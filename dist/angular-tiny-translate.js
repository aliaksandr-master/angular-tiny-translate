!function(r){function n(a){if(t[a])return t[a].exports;var e=t[a]={exports:{},id:a,loaded:!1};return r[a].call(e.exports,e,e.exports,n),e.loaded=!0,e.exports}var t={};return n.m=r,n.c=t,n.p="",n(0)}([function(r,n,t){r.exports=t(2)},function(r,n){"use strict";angular.module("angular-tiny-translate.provider",[]).provider("TinyTranslate",function(){var r={},n={},t={},a="*",e=/\{\*}/g;return r.$get=function(r){var a=function(n,t){return r.error('invalid translation ID "'+n+"["+t+']"'),""},i=function(r,i){var l=arguments.length<=2||void 0===arguments[2]?a:arguments[2],o=r+"."+i;if(n.hasOwnProperty(o))return n[o];var u=null;if(t.hasOwnProperty(r)){var s=t[r];u=angular.isFunction(s)?s(i):t[r].replace(e,i)}else u=angular.isFunction(l)?l(r,i):"";return n[o]=u,u};return{translate:i}},r.$get.$inject=["$log"],r.translations=function(r){angular.forEach(r,function(r,e){if(null==r||!angular.isObject(r))throw new TypeError("invalid translation hash table format");angular.forEach(r,function(r,i){if(!angular.isString(r))throw new TypeError("invalid translation type");i===a?t[e]=r:n[e+"."+i]=r})})},r}),r.exports="angular-tiny-translate.provider"},function(r,n,t){"use strict";var a=t(1),e=t(3);angular.module("angular-tiny-translate",[e,a]),r.exports="angular-tiny-translate"},function(r,n,t){"use strict";var a=t(1);angular.module("angular-tiny-translate.filter",[a]).filter("tr",["TinyTranslate",function(r){return function(n,t){return r.translate(t,n)}}]),r.exports="angular-tiny-translate.filter"}]);